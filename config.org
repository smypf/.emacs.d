#+TITLE: Emacs Config
#+AUTHOR: Sasha Yee

* Things to fix
- [ ] Key Bindings
  - [ ] Tab to open close headings
  - [X] SPC w <window operations>
  - [X] SPC b n + SPC b p for navigating buffers
- [X] Turn off noise
- [ ] Don't install packages every time.
- [X] Use the theme
- [X] SPC-: Replicate from Doom
- [X] Install magit
- [ ] New splash page
- [ ] Make Which-Key not as noisy - Unbind unused keys?
- [X] Install Consult etc
- Magit
  - [X] Open in vertical split
    https://emacs.stackexchange.com/questions/17872/algorithm-on-deciding-splitting-vertically-or-horizontally/17877#17877
    The value for split-width-threshold and split-height-threshold was taken from Doom Emacs which does this well
    https://github.com/doomemacs/doomemacs/blob/61a7c541655038615e3f846a87db2e7d5883d35a/core/core-ui.el#L290
  - [X] Change buffer below commit message instead of on top of
- [ ] Automatically install packages
  https://stackoverflow.com/a/10093312
  https://stackoverflow.com/a/10095853
- [ ] Paging is weird. Scrolling pages down at the bottom of the page
- [X] New command :"W => :w
  This isn't possible as it's a syntax error
- [ ] Do you want to use `global-hl-line-mode`
- [ ] Theme
  - [X] Search Matches are impossible to see
- [X] Orderless
  - [X] Fuzzy search
  - [X] Space should match anything
- [X] "y" and "n" for confirmations instead of "yesRET" and "noRET"

- [ ] LSP ?

* Useful things

| Key Binding | Function                                    |
|-------------+---------------------------------------------|
| C-h v       | Describe variables                          |
| C-h f       | Describe functions                          |
| M-s h C-h   | Highlight commands                          |
| M-s o       | Occur - Show buffer with all search results |


** Highlighting things
Occur
https://stackoverflow.com/a/9938538

* Basic settings
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (setq visible-bell 1)
#+END_SRC

* Keep directories clean

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'no-littering)
    (require 'no-littering))
#+END_SRC

* Package Management
** Use package.el to use MELPA
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))

  ;; Setting this significantly increases the statup time as packages are refreshed from melpa
  ;; See C-h f package-refresh-contents
  ;; (package-refresh-contents)
  (setq package-enable-at-startup nil)
#+END_SRC

** use-package

#+BEGIN_SRC emacs-lisp
  ;; This is only needed once, near the top of the file
  (eval-when-compile
    ;; Following line is not needed if use-package.el is in ~/.emacs.d
    (add-to-list 'load-path (expand-file-name "elpa/" user-emacs-directory))
    (unless (package-installed-p 'use-package)
      (require 'use-package)))
  (setq use-package-always-ensure t)
#+END_SRC

** EVIL Mode

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init

    (setq evil-want-integration t
	  evil-want-keybinding nil
	  evil-vsplit-window-right t
	  evil-split-window-below t
	  evil-undo-system 'undo-redo)

    ; Setting `split-height-threshold` to nil and `split-width-threshold` to 1 forces vertical splits
    ; This was specifically done for ensuring that magit panes are not opened in horizontal splits
    ; These values are copied from the Doom Emacs repository
    ; https://github.com/doomemacs/doomemacs/blob/61a7c541655038615e3f846a87db2e7d5883d35a/core/core-ui.el#L290
    (setq split-height-threshold nil
	  split-width-threshold 160)
    (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package general
    :init
    (general-evil-setup t))

  (defconst leader "SPC")

  (setq scroll-conservatively 101) ; Prevent the cursor jumping to the middle of the page when scrolling to the bottom of the screen
					  ; https://stackoverflow.com/a/25777730
  (setq scroll-margin 5)
#+END_SRC

*** New commands

Sometimes I have sausage fingers. These commands allow me to mistype commands which I regularly input incorrectly
#+BEGIN_SRC emacs-lisp
  ; For some reason this doesn't work
  ; (evil-ex-define-cmd "\"w" 'evil-write) 
  (evil-ex-define-cmd "W" 'evil-write) 

#+END_SRC
*** Search

Set isearch to behave how I want it to.
https://stackoverflow.com/a/54832344

#+BEGIN_SRC emacs-lisp
  (setq lazy-highlight-cleanup nil
	lazy-highlight-max-at-a-time nil
	lazy-highlight-initial-delay 0
	isearch-allow-scroll t)
#+END_SRC

* Appearance
** Theme

#+BEGIN_SRC emacs-lisp
  (package-install-file (expand-file-name "eink-theme.el" user-emacs-directory))

  (load-theme 'eink t)
#+END_SRC

** Other
#+BEGIN_SRC emacs-lisp
  ;; Add line numbers globally
  (global-display-line-numbers-mode)
#+END_SRC
* Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit)

  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix leader
   "g" 'magit)

  ; Kill the magit buffer and close the pane
  (general-define-key
   :state 'normal
   :keymaps 'magit-mode-map
   "q" 'kill-buffer-and-window)

  ;; https://emacs.stackexchange.com/a/14012
  (add-hook 'with-editor-mode-hook 'evil-insert-state)
#+END_SRC

* Which Key

#+BEGIN_SRC emacs-lisp
  (use-package which-key)
  (which-key-mode)
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   "-" 'dired-jump)

  (evil-define-key 'normal dired-mode-map "q" 'kill-buffer-and-window)

  ; Prevent new buffers from being created when navigating directories
  (setq dired-kill-when-opening-new-dired-buffer t)
#+END_SRC

* Window Manipulation

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix leader
   "w" 'evil-window-map)

  (define-key evil-window-map (kbd "<right>") 'evil-window-right)
  (define-key evil-window-map (kbd "<left>") 'evil-window-left)
  (define-key evil-window-map (kbd "<up>") 'evil-window-up)
  (define-key evil-window-map (kbd "<down>") 'evil-window-down)

  (define-key evil-window-map (kbd "S-<right>") 'evil-window-move-far-right)
  (define-key evil-window-map (kbd "S-<left>") 'evil-window-move-far-left)
  (define-key evil-window-map (kbd "S-<up>") 'evil-window-move-very-top)
  (define-key evil-window-map (kbd "S-<down>") 'evil-window-move-very-bottom)
#+END_SRC


* Completion

Vertico
https://github.com/minad/vertico#complementary-packages

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-count 15))

  (general-nmap
    "  " 'vertico-find)

  (use-package consult
    :init
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)
    :config
    (autoload 'projectile-project-root "projectile"))

  (use-package orderless
    :custom
    (completion-styles '(orderless flex))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

* QOL Extensions
** Projectile

#+BEGIN_SRC emacs-lisp
    (use-package projectile)

    (general-define-key
     :states 'normal
     :keymaps 'override
     :prefix leader
     "SPC" 'projectile-find-file
     "pp" 'projectile-switch-project)

    (setq projectile-project-search-path '("~/projects/"))
    (projectile-discover-projects-in-search-path)
#+END_SRC

** simple.el

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix leader
   ":" 'execute-extended-command)
#+END_SRC


** Buffers

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix leader
   "bp" 'evil-prev-buffer
   "bn" 'evil-next-buffer
   "bb" 'switch-to-buffer)
#+END_SRC

** Yes or No
https://www.emacswiki.org/emacs/YesOrNoP

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Search 

#+BEGIN_SRC emacs-lisp
  (defun search-thing-at-point ()
    (interactive)
    (consult-ripgrep (projectile-project-root) (thing-at-point 'symbol)))


  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix leader
   "?" 'consult-ripgrep
   "/" 'search-thing-at-point
   "s" 'consult-line)

#+END_SRC

* Code

** TypeScript

#+BEGIN_SRC emacs-lisp
  (use-package tide
    :ensure t
    ;; :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
	   (typescript-mode . tide-hl-identifier-mode)
	   ;; (before-save . tide-format-before-save))
	   ))
#+END_SRC

* vterm

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix leader
   "'" 'vterm)
#+END_SRC

* Code

** Finding Things

#+BEGIN_SRC emacs-lisp
  (defun find-references-at-point ()
    (interactive)
    (xref-find-references (thing-at-point 'symbol)))


  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix leader
   "cd" 'xref-find-definitions
   "cD" 'find-references-at-point)
#+END_SRC
